syntax = "proto3";

package waterfall;

message Message {
  bytes payload = 1;
}

// Keep this as lean as possible. We only care about the payload during most
// of the duration of the session. All other fields are only useful during
// the beginning/end of the transfer
message Transfer {
  // Remote path to for push/pull. Remote path lives in the server fs.
  // There is no need to send local path, since client has this info.
  string path = 1;

  // A stream of bytes. Encoded as a tarball.
  bytes payload = 2;

  // status fields.
  bool success = 3;
  bytes err = 4;
}

message Cmd {
  // Path to the binary to execute.
  // Path should be absolute. Otherwise behavior is not specified.
  // use /system/bin/sh -c to run in a shell.
  // Interactive shell is not supported.
  string path = 1;

  // Args to pass to the command
  repeated string args = 2;

  // Directory to execute the command
  string dir = 3;
}

message CmdProgress {
  // the exit code of the command.
  // Only populated when the gRPC stream is done.
  // I.e. the last message before the EOF.
  uint32 exit_code = 1;

  bytes stdout = 2;
  bytes stderr = 3;
}

message ForwardMessage {
  enum Kind {
    UNSET = 0;
    TCP = 1;
    UDP = 2;
    UNIX = 3;
  }

  enum Op {
    OPEN = 0;
    FWD = 1;
    CLOSE = 2;
  }

  // Kind of connection to start (tcp|udp|unix)
  Kind kind = 1;
  Op op = 2;

  // Address to open and redirect payload to.
  string addr = 3;
  // Data to be pushed to connection established on addr.
  bytes payload = 4;
}

service Waterfall {
  // Echo exists solely for test purposes.
  rpc Echo(stream Message) returns (stream Message);

  // Push file/dir from host to device.
  rpc Push(stream Transfer) returns (Transfer);

  // Pull file/dir from device to host.
  rpc Pull(Transfer) returns (stream Transfer);

  // Execute cmd in the device and foward stdout and stderr to client
  rpc Exec(Cmd) returns (stream CmdProgress);

  // Forward forwards the stream payload to the requested socket
  rpc Forward(stream ForwardMessage) returns (stream ForwardMessage);
}

message Entry {
  string key = 1;
  string val = 2;
}

message OpResult {
  enum Status {
    UNSET = 0;
    SUCCESS = 1;
    KEY_NOT_FOUND = 2;
  }
  Status status = 1;
  Entry entry = 2;
}

// service Registry is a simple Key - Value Store
service Registry {
  rpc Add(Entry) returns (OpResult);
  rpc Remove(Entry) returns (OpResult);
  rpc Get(Entry) returns (OpResult);
}
